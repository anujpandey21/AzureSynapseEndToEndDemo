{
	"name": "demoscript1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fcedec9c-87c7-4416-8ca6-8ad3a5f00a8c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"ms_comments": [
						{
							"threadId": "b31d0b03-a151-4ef5-af83-36b4eab53bb3",
							"text": "Review completed",
							"status": "active",
							"user": {
								"name": "Arshad Ali",
								"idType": "aad"
							},
							"createdDateUTC": 1636419507852,
							"modifiedDateUTC": 1636419507852,
							"replies": []
						}
					],
					"ms_comment_ranges": {
						"b31d0b03-a151-4ef5-af83-36b4eab53bb3": {
							"text": "from azureml.opendatasets import NycTlcYellow\nfrom dateutil import parser\nfrom datetime import datetime\n\nstart_date = parser.parse('2018-05-01')\nend_date = parser.parse('2018-05-31')\nnyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\nfiltered_df = nyc_tlc.to_spark_dataframe()",
							"start": {
								"line": 1,
								"column": 1
							},
							"end": {
								"line": 8,
								"column": 43
							}
						}
					}
				},
				"source": [
					"from azureml.opendatasets import NycTlcYellow\r\n",
					"from dateutil import parser\r\n",
					"from datetime import datetime\r\n",
					"\r\n",
					"start_date = parser.parse('2018-05-01')\r\n",
					"end_date = parser.parse('2018-05-31')\r\n",
					"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
					"filtered_df = nyc_tlc.to_spark_dataframe()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS NycTlcTutorial\")\r\n",
					"filtered_df.write.mode(\"overwrite\").saveAsTable(\"NycTlcTutorial.nyctaxi\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM NycTlcTutorial.nyctaxi LIMIT 10"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.conf.get(\"spark.driver.maxResultSize\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%configure -f \r\n",
					"{\r\n",
					"    \"conf\": {\"spark.driver.maxResultSize\": \"10g\"}\r\n",
					"}"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.conf.get(\"spark.driver.maxResultSize\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(spark.conf.get(\"spark.executor.instances\"))\r\n",
					"print(spark.conf.get(\"spark.executor.cores\"))\r\n",
					"print(spark.conf.get(\"spark.executor.memory\"))"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%configure -f \r\n",
					"{\r\n",
					"    \"numExecutors\": 4,\r\n",
					"    \"executorCores\": 4,\r\n",
					"    \"executorMemory\": \"28g\"\r\n",
					"}"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(spark.conf.get(\"spark.executor.instances\"))\r\n",
					"print(spark.conf.get(\"spark.executor.cores\"))\r\n",
					"print(spark.conf.get(\"spark.executor.memory\"))"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}